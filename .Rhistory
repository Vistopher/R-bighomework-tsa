library(forecast)
library(tseries)
library(rugarch)
library(xts)
library(vars)
quarterly <- read_excel("quarterly.xls")
quarterly <- read_excel("quarterly.xls")
quarterly <- read_excel("quarterly.xls")
# Extract the necessary variables
delta_lipt <- diff(log(quarterly$IndProd))
inft <- diff(log(quarterly$CPI))
# Perform ADF test
adf_delta_lipt <- adf.test(delta_lipt)
adf_inft <- adf.test(inft)
# Print the test results
cat("ADF test for Δlipt:\n")
print(adf_delta_lipt)
cat("\nADF test for inft:\n")
print(adf_inft)
# Extract the necessary variables
delta_lipt <- diff(log(quarterly$IndProd))
inft <- diff(log(quarterly$CPI))
# Create a data frame with the variables
data <- data.frame(delta_lipt, inft)
# Specify the lag order
lag_order <- 3
# Estimate the VAR model
var_model <- VAR(data, p = lag_order, type = "const")
# Save the residuals
residuals <- residuals(var_model)
# Print the summary of the VAR model
summary(var_model)
VARselect(data, lag.max = 5, type = "const")
# Perform the Granger causality tests
causality(var_model, cause = "inft")
causality(var_model, cause = "delta_lipt")
# Calculate variance decompositions
var_decomp <- irf(var_model,  response = "inft", boot = FALSE)
# Extract the variance decompositions at different horizons
var_decomp_values <- var_decomp$irf
# Print the variance decompositions
cat("Proportion due to Δlipt shock (%)   inft shock (%)\n")
cat("Horizon Δlipt inft Δlipt inft\n")
for (horizon in c(1, 4, 8)) {
prop_delta_lipt <- var_decomp_values$delta_lipt[horizon] * 10000
prop_inft <- var_decomp_values$inft[horizon] * 10000
prop_delta_lipt_complement <- 100 - prop_delta_lipt
prop_inft_complement <- 100 - prop_inft
cat(horizon, " ", prop_delta_lipt, " ", prop_inft, " ", prop_delta_lipt_complement, " ", prop_inft_complement, "\n")
}
delta_lipt = var_decomp_values$delta_lipt
inft = var_decomp_values$inft
# Create a data frame with Δlipt and inft
data <- data.frame(delta_lipt = delta_lipt, inft = inft)
# Scatter plot
ggplot(data, aes(x = delta_lipt, y = inft)) +
geom_point() +
labs(x = "Δlipt (Industrial Production)", y = "inft (Inflation)") +
ggtitle("Relationship between Industrial Production and Inflation")
plot(var_decomp)
plot(var_decomp)
```{r}
# 计算方差分解
var_decomp <- irf(var_model,  response = "inf_ts", boot = FALSE)
# 计算方差分解
var_decomp <- irf(var_model,  response = "inf_ts", boot = FALSE)
# 使用格兰杰因果检验
causality(var_model, cause = "diff.lip_ts")
quarterly <- read_excel("quarterly.xls")
head(quarterly)
tail(quarterly)
# 获取工业生产和居民消费价格指数的对数变化率
diff.lip<-diff(log(quarterly$IndProd))
inf<-diff(log(quarterly$CPI))
# 获取工业生产额对数变化率和通货膨胀率的时间趋势折线图
plot(diff.lip, type = "l", main = "diff.lip Trend", xlab = "Time", ylab = "Values")
plot(inf, type = "l", main = "diff.inf Trend", xlab = "Time", ylab = "Values")
# 对diff.lip和diff.inf进行单位根检验
library(tseries)
library(fUnitRoots)
# 删除缺失值
quarterly<- na.omit(quarterly)
# 用AIC确定ADF基础模型所需的AR阶数p
ar(diff.lip, method="mle")
ar(inf,method="mle")
# 进行单位根检验
fUnitRoots::adfTest(diff.lip, lags=12, type="ct")
fUnitRoots::adfTest(inf, lags=3, type="ct")
# 创建时间序列对象
diff.lip_ts <- ts(diff.lip, start = c(1960, 1), frequency = 4)
inf_ts <- ts(inf, start = c(1960, 1), frequency = 4)
# 绘制折线图
plot(diff.lip_ts, type = "n", col = "blue", xlab = "时间", ylab = "值", main = "工业生产变化率和通货膨胀率")
lines(diff.lip_ts, type = "l", col = "blue")
lines(inf_ts, type = "l", col = "red")
# 添加图例
legend("topright", legend = c("diff.lip", "inf"), col = c("blue", "red"), lty = 1)
# 显示图形
library(vars)
# 用选择变量创建数据框
data <- data.frame(diff.lip_ts, inf_ts)
# 确定滞后阶数
lag_order <- 3
# 估计VAR模型
var_model <- VAR(data, p = lag_order, type = "const")
# 保存残差
residuals <- residuals(var_model)
# 展示估计结果
summary(var_model)
# 找出AIC,SBC和一般到特殊方法选择的最优滞后阶数
VARselect(data, lag.max = 5, type = "const")
# 使用格兰杰因果检验
causality(var_model, cause = "diff.lip_ts")
causality(var_model, cause = "inf_ts")
# 计算方差分解
var_decomp <- irf(var_model,  response = "inf_ts", boot = FALSE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("Proportion due to Δlipt shock (%)   inft shock (%)\n")
cat("Horizon Δlipt inft Δlipt inft\n")
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff_lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, " ", prop_diff.lipt_ts, " ",  prop_inf_ts , " ",  prop_diff_lip_ts_complement, " ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model,  response = "inf_ts", boot = FALSE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("Proportion due to Δlipt shock (%)   inft shock (%)\n")
cat("Horizon Δlipt inft Δlipt inft\n")
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff.lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, " ", prop_diff.lipt_ts, " ",  prop_inf_ts , " ",  prop_diff.lip_ts_complement, " ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model,  response = "inf_ts", boot = FALSE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("Proportion due to Δlipt shock (%)   inft shock (%)\n")
cat("Horizon    Δlipt    inft    Δlipt    inft\n")
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff.lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, " ", prop_diff.lipt_ts, " ",  prop_inf_ts , " ",  prop_diff.lip_ts_complement, " ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model,  response = "inf_ts", boot = FALSE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff.lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, " ", prop_diff.lipt_ts, " ",  prop_inf_ts , " ",  prop_diff.lip_ts_complement, " ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model,  response = "inf_ts", boot = FALSE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff.lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "    ", prop_diff.lipt_ts, "    ",  prop_inf_ts , "    ",  prop_diff.lip_ts_complement, "    ",  prop_inf_ts_complement , "\n")
}
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff.lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "    ", prop_diff.lipt_ts, "    ",  prop_inf_ts , "    ",  prop_diff.lip_ts_complement, "    ",  prop_inf_ts_complement , "\n")
}
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff.lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "    ", prop_diff.lipt_ts, "    ",  prop_inf_ts , "    ",  prop_diff.lip_ts_complement, "    ",  prop_inf_ts_complement , "\n")
}
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
# 计算方差分解
var_decomp <- irf(var_model,  response = "inf_ts", boot = FALSE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff.lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "    ", prop_diff.lipt_ts, "    ",  prop_inf_ts , "    ",  prop_diff.lip_ts_complement, "    ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model,  response = "inf_ts", boot = FALSE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff.lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "    ", prop_diff.lipt_ts, "    ",  prop_inf_ts , "    ",  prop_diff.lip_ts_complement, "    ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model, impulse="diff.lip_ts", response = "inf_ts", boot = FALSE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff.lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "    ", prop_diff.lipt_ts, "    ",  prop_inf_ts , "    ",  prop_diff.lip_ts_complement, "    ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model, impulse="diff.lip_ts", response = "inf_ts", boot = FALSE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff.lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "    ", prop_diff.lipt_ts, "    ",  prop_inf_ts , "    ",  prop_diff.lip_ts_complement, "    ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model, impulse="diff.lip_ts", response = "inf_ts", boot = TRUE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff.lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "    ", prop_diff.lipt_ts, "    ",  prop_inf_ts , "    ",  prop_diff.lip_ts_complement, "    ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model, response = "inf_ts", boot = TRUE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff.lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "    ", prop_diff.lipt_ts, "    ",  prop_inf_ts , "    ",  prop_diff.lip_ts_complement, "    ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model, response = "inf_ts", boot = TRUE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_diff.lipt_ts <- var_decomp_values$diff.lipt_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_diff.lip_ts_complement <- 100 - prop_diff.lipt_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "    ", prop_diff.lipt_ts, "    ",  prop_inf_ts , "    ",  prop_diff.lip_ts_complement, "    ",  prop_inf_ts_complement , "\n")
}
# 获取工业生产和居民消费价格指数的对数变化率
delta_lip<-diff(log(quarterly$IndProd))
inf<-diff(log(quarterly$CPI))
# 获取工业生产额对数变化率和通货膨胀率的时间趋势折线图
plot(delta_lip, type = "l", main = "diff.lip Trend", xlab = "Time", ylab = "Values")
plot(inf, type = "l", main = "diff.inf Trend", xlab = "Time", ylab = "Values")
# 获取工业生产和居民消费价格指数的对数变化率
delta_lip<-diff(log(quarterly$IndProd))
inf<-diff(log(quarterly$CPI))
# 获取工业生产额对数变化率和通货膨胀率的时间趋势折线图
plot(delta_lip, type = "l", main = "delta_lip Trend", xlab = "Time", ylab = "Values")
plot(inf, type = "l", main = "inf Trend", xlab = "Time", ylab = "Values")
# 对delta_lip和inf进行单位根检验
library(tseries)
library(fUnitRoots)
# 删除缺失值
quarterly<- na.omit(quarterly)
# 用AIC确定ADF基础模型所需的AR阶数p
ar(delta_lip, method="mle")
ar(inf,method="mle")
# 进行单位根检验
fUnitRoots::adfTest(delta_lip, lags=12, type="ct")
fUnitRoots::adfTest(inf, lags=3, type="ct")
# 创建时间序列对象
delta_lip_ts <- ts(delta_lip, start = c(1960, 1), frequency = 4)
inf_ts <- ts(inf, start = c(1960, 1), frequency = 4)
# 绘制折线图
plot(delta_lip_ts, type = "n", col = "blue", xlab = "时间", ylab = "值", main = "工业生产变化率和通货膨胀率")
lines(delta_lip_ts, type = "l", col = "blue")
lines(inf_ts, type = "l", col = "red")
# 添加图例
legend("topright", legend = c("delta_lip", "inf"), col = c("blue", "red"), lty = 1)
# 显示图形
library(vars)
# 用选择变量创建数据框
data <- data.frame(delta_lip_ts, inf_ts)
# 确定滞后阶数
lag_order <- 3
# 估计VAR模型
var_model <- VAR(data, p = lag_order, type = "const")
# 保存残差
residuals <- residuals(var_model)
# 展示估计结果
summary(var_model)
# 使用格兰杰因果检验
causality(var_model, cause = "diff_lip_ts")
# 找出AIC,SBC和一般到特殊方法选择的最优滞后阶数
VARselect(data, lag.max = 5, type = "const")
# 使用格兰杰因果检验
causality(var_model, cause = "delta_ip_ts")
# 使用格兰杰因果检验
causality(var_model, cause = "delta_lip_ts")
causality(var_model, cause = "inf_ts")
# 计算方差分解
var_decomp <- irf(var_model, response = "inf_ts", boot = TRUE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_delta_lip_ts <- var_decomp_values$delta_lip_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_delta_lip_ts_complement <- 100 - prop_delta_lip_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "    ", prop_delta_lip_ts , "    ",  prop_inf_ts , "    ",  prop_delta_lip_ts_complement, "    ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model, response = "inf_ts", boot = TRUE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_delta_lip_ts <- var_decomp_values$delta_lip_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_delta_lip_ts_complement <- 100 - prop_delta_lip_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "         ", prop_delta_lip_ts , "    ",  prop_inf_ts , "    ",  prop_delta_lip_ts_complement, "    ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model, response = "inf_ts", boot = TRUE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_delta_lip_ts <- var_decomp_values$delta_lip_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_delta_lip_ts_complement <- 100 - prop_delta_lip_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "         ", prop_delta_lip_ts , "       ",  prop_inf_ts , "    ",  prop_delta_lip_ts_complement, "    ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model, response = "inf_ts", boot = TRUE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_delta_lip_ts <- var_decomp_values$delta_lip_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_delta_lip_ts_complement <- 100 - prop_delta_lip_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "         ", prop_delta_lip_ts , "       ",  prop_inf_ts , "       ",  prop_delta_lip_ts_complement, "       ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model, response = "inf_ts", boot = TRUE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_delta_lip_ts <- var_decomp_values$delta_lip_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_delta_lip_ts_complement <- 100 - prop_delta_lip_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "         ", prop_delta_lip_ts , "       ",  prop_inf_ts , "        ",  prop_delta_lip_ts_complement, "        ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model, response = "inf_ts", boot = TRUE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_delta_lip_ts <- var_decomp_values$delta_lip_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_delta_lip_ts_complement <- 100 - prop_delta_lip_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "         ", prop_delta_lip_ts , "       ",  prop_inf_ts , "         ",  prop_delta_lip_ts_complement, "         ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model, response = "delta_lip_ts", boot = TRUE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_delta_lip_ts <- var_decomp_values$delta_lip_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_delta_lip_ts_complement <- 100 - prop_delta_lip_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "         ", prop_delta_lip_ts , "       ",  prop_inf_ts , "         ",  prop_delta_lip_ts_complement, "         ",  prop_inf_ts_complement , "\n")
}
# 计算方差分解
var_decomp <- irf(var_model, response = "inf_ts", boot = TRUE)
#提取不同时间范围内的方差分解结果
var_decomp_values <- var_decomp$irf
# 打印方差分解
cat("        Proportion due to Δlipt shock (%)   Proportion due to inft shock (%)\n")
cat("Horizon       Δlipt          inft                 Δlipt            inft\n")
for (horizon in c(1, 4, 8)) {
prop_delta_lip_ts <- var_decomp_values$delta_lip_ts[horizon] * 10000
prop_inf_ts <- var_decomp_values$inf_ts[horizon] * 10000
prop_delta_lip_ts_complement <- 100 - prop_delta_lip_ts
prop_inf_ts_complement <- 100 - prop_inf_ts
cat(horizon, "         ", prop_delta_lip_ts , "       ",  prop_inf_ts , "         ",  prop_delta_lip_ts_complement, "         ",  prop_inf_ts_complement , "\n")
}
coef_matrix <- coefficients(var_model)  # 获取估计的系数矩阵
# 进行Choleski分解
choleski_decomp <- chol(coef_matrix)
coef_matrix <- coefficients(var_model)  # 获取估计的系数矩阵
# 将系数矩阵转换为数值矩阵
coef_matrix_numeric <- matrix(unlist(coef_matrix), nrow = ncol(coef_matrix), byrow = TRUE)
coef_matrix <- coef(var_model)  # 获取估计的系数矩阵
# 进行 Cholesky 分解
cholesky_decomp <- chol(coef_matrix)
coef_matrix <- as.matrix(coef(var_model))  # 获取估计的系数矩阵并转换为数值矩阵
# 进行 Cholesky 分解
cholesky_decomp <- chol(coef_matrix)
coef_matrix <- as.matrix(coef(var_model))  # 获取估计的系数矩阵并转换为数值矩阵
# 进行 Cholesky 分解
cholesky_decomp <- chol(coef_matrix)
coef_matrix <- as.matrix(coef(var_model)$varresult$A)  # 获取估计的系数矩阵并转换为数值矩阵
coef_matrix <- coef(var_model)$varresult$A  # 获取估计的系数矩阵
# 将系数矩阵转换为数值矩阵
coef_matrix_numeric <- matrix(as.numeric(coef_matrix), nrow = ncol(coef_matrix), byrow = TRUE)
coef_matrix <- as.matrix(coef(var_model)$varresult$A, ncol = length(var_model$varresult$A))  # 获取估计的系数矩阵并转换为数值矩阵
coef_matrix <- as.matrix(coef(var_model)) # 获取估计的系数矩阵并转换为数值矩阵
# 进行 Cholesky 分解
cholesky_decomp <- chol(coef_matrix)
coef_matrix <- as.matrix(unlist(coef(var_model))) # 获取估计的系数矩阵并转换为数值矩阵
# 进行 Cholesky 分解
cholesky_decomp <- chol(coef_matrix)
coef_matrix
coef(var_model)
unlist(coef(var_model))
coef(var_model)$varresult$A
coef(var_model)$varresult$B
var_model$varresult$A
var_model$varresult$A
var_model$varresult$A
library(vars)
# 用选择变量创建数据框
data <- data.frame(delta_lip_ts, inf_ts)
# 确定滞后阶数
lag_order <- 3
# 估计VAR模型
var_model <- VAR(data, p = lag_order, type = "const")
# 保存残差
residuals <- residuals(var_model)
# 展示估计结果
summary(var_model)
var_model$varresult$A
coef(var_model)$A
coef(var_model,complete=FALSE)
